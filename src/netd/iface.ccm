/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or distribute
 * this software, either in source code form or as a compiled binary, for any
 * purpose, commercial or non-commercial, and by any means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors of
 * this software dedicate any and all copyright interest in the software to the
 * public domain. We make this dedication for the benefit of the public at
 * large and to the detriment of our heirs and successors. We intend this
 * dedication to be an overt act of relinquishment in perpetuity of all present
 * and future rights to this software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module;

#include	<sys/types.h>
#include	<sys/socket.h>
#include	<sys/queue.h>
#include	<sys/uuid.h>

#include	<netinet/in.h>
#include	<netinet/if_ether.h>

#include	<map>
#include	<string>
#include	<vector>
#include	<expected>

#include	"defs.hh"
#include	"generator.hh"

import network;
import netd.rate;

export module iface;

/*
 * iface: manage running interfaces.
 */

namespace netd::iface {
	struct interface;	/* private */
}

export namespace netd::iface {


/* initialise the network subsystem */
auto init(void) -> int;

/*
 * a handle representing an interface.
 *
 * the fields of this struct should be considered private.
 */

struct handle {
	interface		*ih_ptr;
	uuid			 ih_uuid;
	mutable std::uint64_t	 ih_gen;
};

/* fetch an interface by name */
auto getbyname(std::string_view name)
	-> std::expected<handle, std::error_code>;

/* fetch an interface by kernel ifindex */
auto getbyindex(int index)
	-> std::expected<handle, std::error_code>;

/* fetch an interface by uuid */
auto getbyuuid(uuid uuid)
	-> std::expected<handle, std::error_code>;

/* an address assigned to an interface */
struct ifaddr {
	int			ifa_family	= 0;
	union {
		struct ether_addr	ifa_ether;
		struct in_addr		ifa_addr4;
		struct in6_addr		ifa_addr6;
	};
	int			ifa_plen	= 0;	/* prefix length */
};

/* return information about an interface */
struct ifinfo {
	std::string		name;
	uuid			uuid;
	int			index;
	uint8_t			operstate;
	uint32_t		flags;
	uint64_t		rx_bps;
	uint64_t		tx_bps;
	std::vector<ifaddr>	addresses;
};

auto info(handle const &) -> ifinfo;

/* iterate all interfaces */
auto getall(void) -> std::generator<handle>;

} // namespace netd::iface
