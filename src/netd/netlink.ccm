/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or distribute
 * this software, either in source code form or as a compiled binary, for any
 * purpose, commercial or non-commercial, and by any means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors of
 * this software dedicate any and all copyright interest in the software to the
 * public domain. We make this dedication for the benefit of the public at
 * large and to the detriment of our heirs and successors. We intend this
 * dedication to be an overt act of relinquishment in perpetuity of all present
 * and future rights to this software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module;

/*
 * netlink support; handles receiving network-related events from the kernel
 * and dispatching them to the appropriate place.
 */

#include <netlink/netlink.h>
#include <netlink/route/interface.h>
#include <netlink/route/route.h>
#include <netlink/route/ifaddrs.h>
#include <netlink/route/common.h>

#include <cassert>
#include <functional>
#include <map>
#include <array>
#include <expected>
#include <memory>
#include <string>
#include <system_error>
#include <coroutine>
#include <unistd.h>

#include "defs.hh"

export module netlink;

import netd.util;
import netd.async;
import log;

namespace netd::netlink {

/*
 * a netlink socket which can read and write messages.
 */
export struct socket {
	socket() noexcept = default;

	socket(socket &&other) noexcept
	{
		*this = std::move(other);
	}

	socket(socket const &) = delete;

	auto operator=(socket const &) = delete;
	auto operator=(socket &&other) noexcept -> socket &
	{
		if (this != &other) {
			_fdesc = std::move(other._fdesc);
			std::swap(_buffer, other._buffer);
			_msgsize = other._msgsize;
			_pending = other._pending;
		}

		return *this;
	}

	~socket() noexcept = default;

	// create a new netlink socket
	static auto create(int flags) noexcept
		-> std::expected<socket, std::error_code>
	{
		socket sock;

		auto fd_ = ::socket(AF_NETLINK, SOCK_RAW | flags,
				    NETLINK_ROUTE);
		if (fd_ == -1)
			return std::unexpected(error::from_errno());

		sock._fdesc = fd(fd_);

		auto	 optval = 1;
		unsigned optlen = sizeof(optval);
		if (setsockopt(sock._fdesc.get(), SOL_NETLINK, NETLINK_MSG_INFO,
			       &optval, optlen) != 0)
			return std::unexpected(error::from_errno());

		return sock;
	}

	// read a single message from the socket
	auto read() -> task<std::expected<nlmsghdr *, std::error_code>>
	{
		log::debug("netlink read: starting");

		// how much to read each go
		constexpr std::size_t blksz = 8192;

		// if we already read a message, discard it from the buffer
		if (_msgsize > 0) {
			_buffer.erase(_buffer.begin(),
				      _buffer.begin() + static_cast<ssize_t>(_msgsize));
			_msgsize = 0;
		}

		for (;;) {
			// see if we have a message
			if (!_buffer.empty()) {
				auto hdr = reinterpret_cast<nlmsghdr *>(data(_buffer));
				if (NLMSG_OK(hdr, static_cast<int>(_pending))) {
					_msgsize = hdr->nlmsg_len;
					co_return hdr;
				}
			}

			// keep reading until we got a message
			log::debug("netlink read: no message");

			// make sure we have at least blksz bytes left in the buffer
			if (_buffer.size() - _pending < blksz)
				_buffer.resize(_buffer.size() + blksz);

			// read some data and see if it turns into a valid message
			auto r = co_await kq::read(
				_fdesc, std::span(_buffer).subspan(_pending));

			if (!r)
				co_return std::unexpected(error::from_errno());

			if (*r == 0)
				co_return std::unexpected(error::from_errno(ENOMSG));

			_pending += *r;
		}
	}

	// send a message to the socket
	auto send(nlmsghdr *msg) -> task<std::expected<void, std::error_code>>
	{
		log::debug("netlink send: send fd={}", _fdesc.get());

		auto bytes = std::span(reinterpret_cast<std::byte const *>(msg),
				       msg->nlmsg_len);
		auto nbytes = co_await kq::write(_fdesc, bytes);
		if (!nbytes)
			co_return std::unexpected(nbytes.error());

		if (*nbytes < bytes.size())
			panic("netlink send: short write");

		co_return {};
	}

	// join the socket to the given group
	auto join(int group) -> task<std::expected<void, std::error_code>>
	{
		auto optlen = socklen_t(sizeof(group));

		if (setsockopt(_fdesc.get(), SOL_NETLINK, NETLINK_ADD_MEMBERSHIP,
			       &group, optlen) == -1)
			co_return std::unexpected(error::from_errno());

		co_return {};
	}

private:
	// the read buffer
	std::vector<std::byte> _buffer;
	// the size of the last message we read
	std::size_t _msgsize = 0;
	// the amount of unprocessed data in the buffer
	std::size_t _pending = 0;

	fd _fdesc;
};

/*
 * netlink events
 */

/* interface created */
export struct newlink_data {
	int		   nl_ifindex;
	std::string	   nl_ifname;
	uint8_t		   nl_operstate;
	uint32_t	   nl_flags;
	rtnl_link_stats64 *nl_stats;
};

export inline event::event<newlink_data> evt_newlink;

/* handle RTM_NEWLINK */
auto hdl_rtm_newlink(nlmsghdr *nlmsg) noexcept -> void
{
	ifinfomsg	 *ifinfo = static_cast<ifinfomsg *>(NLMSG_DATA(nlmsg));
	rtattr		 *attrmsg = NULL;
	size_t		  attrlen;
	newlink_data	  msg;
	rtnl_link_stats64 stats;

	memset(&msg, 0, sizeof(msg));
	memset(&stats, 0, sizeof(stats));

	for (attrmsg = IFLA_RTA(ifinfo), attrlen = IFLA_PAYLOAD(nlmsg);
	     RTA_OK(attrmsg, (int)attrlen);
	     attrmsg = RTA_NEXT(attrmsg, attrlen)) {

		switch (attrmsg->rta_type) {
		case IFLA_IFNAME:
			msg.nl_ifname =
				static_cast<char const *>(RTA_DATA(attrmsg));
			break;

		case IFLA_OPERSTATE:
			msg.nl_operstate = *((uint8_t *)RTA_DATA(attrmsg));
			break;

		case IFLA_STATS64:
			/* copy out since netlink can misalign 8-byte values */
			memcpy(&stats, RTA_DATA(attrmsg), sizeof(stats));
			msg.nl_stats = &stats;
			break;
		}
	}

	if (msg.nl_ifname.empty()) {
		log::error("RTM_NEWLINK: no interface name?");
		return;
	}

	log::debug("RTM_NEWLINK: {}<{}> nlmsg_flags={:#x} ifi_flags={:#x}"
		   "ifi_change={:#x}",
		   msg.nl_ifname, ifinfo->ifi_index, nlmsg->nlmsg_flags,
		   ifinfo->ifi_flags, ifinfo->ifi_change);

	msg.nl_ifindex = ifinfo->ifi_index;
	msg.nl_flags = ifinfo->ifi_flags;
	evt_newlink.dispatch(msg);
}

/* interface destroyed */
export struct dellink_data {
	int dl_ifindex;
};
export inline event::event<dellink_data> evt_dellink;

/* handle RTM_DELLINK */
auto hdl_rtm_dellink(nlmsghdr *nlmsg) noexcept -> void
{
	ifinfomsg   *ifinfo = static_cast<ifinfomsg *>(NLMSG_DATA(nlmsg));
	dellink_data msg;

	msg.dl_ifindex = ifinfo->ifi_index;
	evt_dellink.dispatch(msg);
}

/* interface address created */
export struct newaddr_data {
	int	      na_ifindex;
	int	      na_family;
	int	      na_plen;
	void *nonnull na_addr;
};
export inline event::event<newaddr_data> evt_newaddr;

/* handle RTM_NEWADDR */
auto hdl_rtm_newaddr(nlmsghdr *nlmsg) noexcept -> void
{
	ifaddrmsg   *ifamsg;
	rtattr	    *attrmsg;
	size_t	     attrlen;
	newaddr_data msg;

	log::debug("RTM_NEWADDR");

	ifamsg = static_cast<ifaddrmsg *>(NLMSG_DATA(nlmsg));

	msg.na_ifindex = static_cast<int>(ifamsg->ifa_index);
	msg.na_family = ifamsg->ifa_family;
	msg.na_plen = ifamsg->ifa_prefixlen;

	for (attrmsg = IFA_RTA(ifamsg), attrlen = IFA_PAYLOAD(nlmsg);
	     /* cast to int is required because of how RTA_OK() works */
	     /* TODO: this may be a FreeBSD bug */
	     RTA_OK(attrmsg, (int)attrlen);
	     attrmsg = RTA_NEXT(attrmsg, attrlen)) {
		if (attrmsg->rta_type != IFA_ADDRESS)
			continue;

		msg.na_addr = RTA_DATA(attrmsg);
		evt_newaddr.dispatch(msg);
		return;
	}

	log::warning("received RTM_NEWADDR without an IFA_ADDRESS");
}

/* interface address removed */
export struct deladdr_data {
	int	      da_ifindex;
	int	      da_family;
	int	      da_plen;
	void *nonnull da_addr;
};
export inline event::event<deladdr_data> evt_deladdr;

/* handle RTM_DELADDR */
auto hdl_rtm_deladdr(nlmsghdr *nlmsg) noexcept -> void
{
	ifaddrmsg   *ifamsg;
	rtattr	    *attrmsg;
	size_t	     attrlen;
	deladdr_data msg;

	log::debug("RTM_DELADDR");

	ifamsg = static_cast<ifaddrmsg *>(NLMSG_DATA(nlmsg));

	msg.da_ifindex = static_cast<int>(ifamsg->ifa_index);
	msg.da_family = ifamsg->ifa_family;
	msg.da_plen = ifamsg->ifa_prefixlen;

	for (attrmsg = IFA_RTA(ifamsg), attrlen = IFA_PAYLOAD(nlmsg);
	     /* cast to int is required because of how RTA_OK() works */
	     /* TODO: this may be a FreeBSD bug */
	     RTA_OK(attrmsg, (int)attrlen);
	     attrmsg = RTA_NEXT(attrmsg, attrlen)) {
		if (attrmsg->rta_type != IFA_ADDRESS)
			continue;

		msg.da_addr = RTA_DATA(attrmsg);
		evt_deladdr.dispatch(msg);
		return;
	}

	log::warning("received RTM_DELADDR without an IFA_ADDRESS");
}

/*
 * reader: read and process new data from the netlink socket.
 */

auto reader(socket sock) -> jtask<void>
{
	static auto handlers =
		std::map<int, std::function<void(nlmsghdr * msg)>>{
			{RTM_NEWLINK, hdl_rtm_newlink},
			{RTM_DELLINK, hdl_rtm_dellink},
			{RTM_NEWADDR, hdl_rtm_newaddr},
			{RTM_DELADDR, hdl_rtm_deladdr},
	};

	for (;;) {
		auto msg = co_await sock.read();
		if (!msg)
			panic("netlink::reader: read error: {}",
			      msg.error().message());

		if (auto hdl = handlers.find((*msg)->nlmsg_type);
		    hdl != handlers.end())
			hdl->second(*msg);
	}

	co_return;
}

/*
 * ask the kernel to report all existing network interfaces.
 */
auto fetch_interfaces() -> task<std::expected<void, std::error_code>>
{
	nlmsghdr hdr;

	auto nls = socket::create(SOCK_CLOEXEC | SOCK_NONBLOCK);
	if (!nls)
		co_return std::unexpected(nls.error());

	memset(&hdr, 0, sizeof(hdr));
	hdr.nlmsg_len = sizeof(hdr);
	hdr.nlmsg_type = RTM_GETLINK;
	hdr.nlmsg_flags = NLM_F_REQUEST | NLM_F_DUMP;

	if (auto ret = co_await nls->send(&hdr); !ret)
		co_return std::unexpected(ret.error());

	for (;;) {
		log::debug("fetch_interfaces: reading");
		auto ret = co_await nls->read();
		if (!ret)
			co_return std::unexpected(ret.error());
		auto rhdr = *ret;

		if (rhdr->nlmsg_type == NLMSG_DONE)
			break;

		assert(rhdr->nlmsg_type == RTM_NEWLINK);
		hdl_rtm_newlink(rhdr);
	}

	co_return {};
}

/*
 * ask the kernel to report all existing addresses.
 */
auto fetch_addresses() -> task<std::expected<void, std::error_code>>
{
	nlmsghdr hdr;

	auto nls = socket::create(SOCK_CLOEXEC | SOCK_NONBLOCK);
	if (!nls)
		co_return std::unexpected(nls.error());

	memset(&hdr, 0, sizeof(hdr));
	hdr.nlmsg_len = sizeof(hdr);
	hdr.nlmsg_type = RTM_GETADDR;
	hdr.nlmsg_flags = NLM_F_REQUEST | NLM_F_DUMP;

	if (auto ret = co_await nls->send(&hdr); !ret)
		co_return std::unexpected(ret.error());

	for (;;) {
		auto ret = co_await nls->read();
		if (!ret)
			co_return std::unexpected(ret.error());
		auto rhdr = *ret;

		if (rhdr->nlmsg_type == NLMSG_DONE)
			break;

		assert(rhdr->nlmsg_type == RTM_NEWADDR);
		hdl_rtm_newaddr(rhdr);
	}

	co_return {};
}

/* initialise the netlink subsystem */
export auto init() -> task<std::expected<void, std::error_code>>
{
	/*
	 * create the main netlink socket which we use to monitor the system.
	 */

	auto nls = socket::create(SOCK_NONBLOCK | SOCK_CLOEXEC);
	if (!nls) {
		log::fatal("netlink::init: socket_create: {}",
			   nls.error().message());
		co_return std::unexpected(nls.error());
	}

	// the event groups we want to join.
	auto groups = std::array{
		RTNLGRP_LINK,	     RTNLGRP_NEIGH,	 RTNLGRP_NEXTHOP,
		RTNLGRP_IPV4_IFADDR, RTNLGRP_IPV4_ROUTE, RTNLGRP_IPV6_IFADDR,
		RTNLGRP_IPV6_ROUTE,
	};

	for (auto group: groups) {
		if (auto ret = co_await nls->join(group); !ret) {
			log::fatal("netlink init: failed to join {}: {}",
				   static_cast<int>(group),
				   ret.error().message());
			co_return std::unexpected(ret.error());
		}
	}

	if (auto ret = co_await fetch_interfaces(); !ret) {
		log::fatal("netlink::init: fetch_interfaces: {}",
			   ret.error().message());
		co_return std::unexpected(ret.error());
	}

	if (auto ret = co_await fetch_addresses(); !ret) {
		log::fatal("netlink::init: fetch_addresses: {}",
			   ret.error().message());
		co_return std::unexpected(ret.error());
	}

	kq::run_task(reader(std::move(*nls)));
	co_return {};
}


} // namespace netd::netlink
