/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or distribute
 * this software, either in source code form or as a compiled binary, for any
 * purpose, commercial or non-commercial, and by any means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors of
 * this software dedicate any and all copyright interest in the software to the
 * public domain. We make this dedication for the benefit of the public at
 * large and to the detriment of our heirs and successors. We intend this
 * dedication to be an overt act of relinquishment in perpetuity of all present
 * and future rights to this software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module;

/*
 * message logging (syslog and stderr).
 */

#include <cassert>
#include <chrono>
#include <format>
#include <string>

#include <syslog.h>

#include "defs.hh"

import netd.util;

export module log;

using namespace std::literals;

namespace netd::log {

enum class severity {
	debug,
	info,
	warning,
	error,
	fatal,
};

// log destinations
export constexpr auto syslog = 0x1u;
export constexpr auto console = 0x2u;
export constexpr auto destmask = 0x3u;

// default destination
export constexpr auto defaultdest = console;

// the current destination, a bitmask.
unsigned logdest = defaultdest;

// define names and syslog-equivalents for each of our log levels
struct loglevel {
	std::string_view ll_name;
	int		 ll_syslog;
};

std::array loglevels{
	loglevel{.ll_name = "debug"sv,   .ll_syslog = LOG_DEBUG  },
	loglevel{.ll_name = "info"sv,    .ll_syslog = LOG_INFO   },
	loglevel{.ll_name = "warning"sv, .ll_syslog = LOG_WARNING},
	loglevel{.ll_name = "error"sv,   .ll_syslog = LOG_ERR	   },
	loglevel{.ll_name = "fatal"sv,   .ll_syslog = LOG_CRIT   },
};

// log a message to the console (stderr)
auto log_console(loglevel level, std::string_view message) noexcept -> void
{
	auto const	     now = std::time(nullptr);
	struct tm	     tm {};
	std::array<char, 64> tmbuf{};

	localtime_r(&now, &tm);
	(void)std::strftime(data(tmbuf), tmbuf.size(), "%Y-%m-%d %H:%M:%S %z",
			    &tm);

	(void)print(stderr, "{} [{}] {}\n", data(tmbuf), level.ll_name,
		    message);
}

// log a message to syslog
auto log_syslog(loglevel level, std::string_view message) noexcept -> void
{
	::syslog(level.ll_syslog, "%s", std::string(message).c_str());
}

// log a message based on the current destination settings
auto log_message(severity sev, std::string_view message) noexcept -> void
{
	auto &level = loglevels[static_cast<std::size_t>(sev)];

	if ((logdest & syslog) != 0)
		log_syslog(level, message);

	if ((logdest & console) != 0)
		log_console(level, message);
}

template<severity sev>
struct sev_log {
	template<typename... Args>
	auto operator()(std::format_string<Args...> fmt,
			Args &&...args) const noexcept -> void
	{
		try {
			auto msg =
				std::format(fmt, std::forward<Args>(args)...);
			log_message(sev, msg);
		} catch (std::bad_alloc const &) {
			panic("log: out of memory");
		} catch (...) {
			panic("log:: unexpected exception");
		}
	}
};

// this is the primary public logging API
export constexpr auto fatal = sev_log<severity::fatal>();
export constexpr auto error = sev_log<severity::error>();
export constexpr auto warning = sev_log<severity::warning>();
export constexpr auto info = sev_log<severity::info>();
export constexpr auto debug = sev_log<severity::debug>();

/* get or set the log destination */
auto getdest() noexcept -> unsigned
{
	return logdest;
}

auto setdest(unsigned newdest) noexcept -> void
{
	assert((newdest & ~destmask) == 0u);

	if (((newdest & syslog) != 0) && ((logdest & syslog) == 0))
		openlog("dlctld", LOG_CONS | LOG_NDELAY | LOG_PID, LOG_DAEMON);
	else if (((newdest & syslog) == 0) && ((logdest & syslog) != 0))
		closelog();

	logdest = newdest;
}

} // namespace netd::log
