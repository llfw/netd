/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or distribute
 * this software, either in source code form or as a compiled binary, for any
 * purpose, commercial or non-commercial, and by any means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors of
 * this software dedicate any and all copyright interest in the software to the
 * public domain. We make this dedication for the benefit of the public at
 * large and to the detriment of our heirs and successors. We intend this
 * dedication to be an overt act of relinquishment in perpetuity of all present
 * and future rights to this software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module;

/*
 * kq: lightweight wrapper around kqueue()/kevent() that allows users to
 * register handlers for various events.
 */

#include <sys/types.h>
#include <sys/socket.h>

#include <expected>
#include <functional>
#include <span>
#include <system_error>

#include "defs.hh"

import log;
import task;

export module kq;

namespace netd::kq {

/*
 * the current time.  this is updated every time the event loop runs, before
 * events are dispatched.
 */
export inline time_t current_time;

/* initialise kq */
export auto init() noexcept -> std::expected<void, std::error_code>;

/* start the kq runner.  only returns on failure. */
export auto run() noexcept -> std::expected<void, std::error_code>;

/* call handler() at the end of the current event loop */
using dispatchcb = std::function<void()>;
export void dispatch(dispatchcb handler) noexcept(
	std::is_nothrow_move_constructible_v<dispatchcb>);

/******************************************************************************
 * async (coroutine) interface.
 */

/*
 * start an async task in the background.  the task will run until completion,
 * then be destroyed.
 */
export auto run_task(jtask<void> &&tsk) noexcept -> void;

/*
 * suspend until the given fd becomes readable.
 */
export auto readable(int fd) -> task<void>;

/*
 * sleep until the given timer expires.
 */
export auto sleep(std::chrono::nanoseconds duration) -> task<void>;

export template<typename Rep, typename Period>
auto sleep(std::chrono::duration<Rep, Period> duration) -> task<void>
{
	co_await sleep(
		std::chrono::duration_cast<std::chrono::nanoseconds>(duration));
}

/*
 * read data into the provided buffer.
 */
export auto read(int fd, std::span<std::byte> buf)
	-> task<std::expected<std::size_t, std::error_code>>;

/*
 * write data from the provided buffer.
 */
export auto write(int fd, std::span<std::byte const> buf)
	-> task<std::expected<std::size_t, std::error_code>>;

/*
 * read a single message into the provided buffer.  reading will continue until
 * the entire message is received (MSG_EOR).
 *
 * returns the size of the message read, or error.  if the buffer is too small
 * to hold the message, the message is discarded and ENOSPC is returned.
 */
export [[nodiscard]] auto recvmsg(int fd, std::span<std::byte> buf)
	-> task<std::expected<std::size_t, std::error_code>>;

/*
 * accept a connection on the given server socket.  the arguments are as
 * described in accept4(2).
 */
export [[nodiscard]] auto
accept4(int server_fd, sockaddr *addr, socklen_t *addrlen, int flags)
	-> task<std::expected<int, std::error_code>>;

} // namespace netd::kq
