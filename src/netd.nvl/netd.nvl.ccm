/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or distribute
 * this software, either in source code form or as a compiled binary, for any
 * purpose, commercial or non-commercial, and by any means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors of
 * this software dedicate any and all copyright interest in the software to the
 * public domain. We make this dedication for the benefit of the public at
 * large and to the detriment of our heirs and successors. We intend this
 * dedication to be an overt act of relinquishment in perpetuity of all present
 * and future rights to this software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module;

/*
 * nvl: lightweight wrapper around nv(9).
 *
 * the priority here is a clean and C++-friendly API, so in some cases this
 * means we do data copies or conversions where libnv itself wouldn't.
 * however, this is extremely unlikely to introduce any performance concerns in
 * practice.
 */

#include <sys/nv.h>

#include <expected>
#include <ranges>
#include <span>
#include <system_error>
#include <vector>

import netd.util;

export module netd.nvl;

/*
 * an nvlist
 */

export namespace netd {

struct nvl {
	nvl(int flags = 0) noexcept : _nv(nvlist_create(flags)), _owning(true)
	{
	}

	explicit nvl(nvlist_t *nv, bool owning = true) noexcept
		: _nv(nv), _owning(owning)
	{
	}

	nvl(nvl const &other) noexcept
		: _nv(nvlist_clone(other._nv)), _owning(true)
	{
	}

	nvl(nvl &&other) noexcept
		: _nv(std::exchange(other._nv, nullptr)), _owning(other._owning)
	{
	}

	auto operator=(nvl const &other) noexcept -> nvl &
	{
		if (this != &other) {
			_free();
			_nv = nvlist_clone(other._nv);
			_owning = true;
		}
		return *this;
	}

	auto operator=(nvl &&other) noexcept -> nvl &
	{
		if (this != &other) {
			std::swap(_nv, other._nv);
			std::swap(_owning, other._owning);
		}
		return *this;
	}

	~nvl() noexcept
	{
		_free();
	}

	template<std::ranges::contiguous_range Range>
		requires std::is_same_v<
			std::byte,
			std::remove_cvref_t<std::ranges::range_value_t<Range>>>
	static auto unpack(Range const &data, int flags = 0) noexcept
		-> std::expected<nvl, std::error_code>
	{
		nvlist_t *nv{};
		if (nv = nvlist_unpack(std::ranges::data(data),
				       std::ranges::size(data), flags);
		    nv != nullptr) {
			return nvl(nv);
		}

		return std::unexpected(error::from_errno());
	}

	[[nodiscard]] static auto recv(int sock, int flags) noexcept
		-> std::expected<nvl, std::error_code>
	{
		if (auto *nv = nvlist_recv(sock, flags); nv != nullptr)
			return nvl(nv);
		return std::unexpected(error::from_errno());
	}

	[[nodiscard]] static auto
	xfer(int sock, nvl &&nvlist, int flags) noexcept
		-> std::expected<nvl, std::error_code>
	{
		nvlist_t *nv{};
		if (nv = nvlist_xfer(sock, nvlist._nv, flags); nv != nullptr) {
			// nvlist_xfer destroys the original list
			nvlist._nv = nullptr;
			return nvl(nv);
		}

		return std::unexpected(error::from_errno());
	}

	[[nodiscard]] auto error() const noexcept
		-> std::optional<std::error_code>
	{
		if (auto const err = nvlist_error(_nv); err != 0)
			return std::make_error_code(std::errc(err));
		return {};
	}

	[[nodiscard]] explicit operator bool() const noexcept
	{
		return nvlist_error(_nv) == 0;
	}

	auto set_error(int error) noexcept -> void
	{
		nvlist_set_error(_nv, error);
	}

	[[nodiscard]] auto empty() const noexcept -> bool
	{
		return nvlist_empty(_nv);
	}

	[[nodiscard]] auto flags() const noexcept -> int
	{
		return nvlist_flags(_nv);
	}

	[[nodiscard]] auto in_array() const noexcept -> bool
	{
		return nvlist_in_array(_nv);
	}

	auto dump(int fd) const noexcept -> void
	{
		nvlist_dump(_nv, fd);
	}

	auto fdump(FILE *fp) const noexcept -> void
	{
		nvlist_fdump(_nv, fp);
	}

	[[nodiscard]] auto size() const noexcept -> std::size_t
	{
		return nvlist_size(_nv);
	}

	[[nodiscard]] auto pack() const noexcept
		-> std::expected<std::vector<std::byte>, std::error_code>
	{
		std::size_t size{};

		if (auto *data = nvlist_pack(_nv, &size); data != nullptr) {
			auto bytes = free_ptr<std::byte>(
				static_cast<std::byte *>(data));
			return std::vector(bytes.get(), bytes.get() + size);
		}

		return std::unexpected(error::from_errno());
	}

	[[nodiscard]] auto send(int sock) const noexcept
		-> std::expected<void, std::error_code>
	{
		if (nvlist_send(sock, _nv) == 0)
			return {};
		return std::unexpected(error::from_errno());
	}

	/*
	 * exists_xxx() accessors.
	 */

	[[nodiscard]] auto exists(std::string_view name) const noexcept -> bool
	{
		return nvlist_exists(_nv, std::string(name).c_str());
	}

	[[nodiscard]] auto exists_null(std::string_view name) const noexcept
		-> bool
	{
		return nvlist_exists_null(_nv, std::string(name).c_str());
	}

	[[nodiscard]] auto exists_bool(std::string_view name) const noexcept
		-> bool
	{
		return nvlist_exists_bool(_nv, std::string(name).c_str());
	}

	[[nodiscard]] auto exists_number(std::string_view name) const noexcept
		-> bool
	{
		return nvlist_exists_number(_nv, std::string(name).c_str());
	}

	[[nodiscard]] auto exists_string(std::string_view name) const noexcept
		-> bool
	{
		return nvlist_exists_string(_nv, std::string(name).c_str());
	}

	[[nodiscard]] auto exists_nvlist(std::string_view name) const noexcept
		-> bool
	{
		return nvlist_exists_nvlist(_nv, std::string(name).c_str());
	}

	[[nodiscard]] auto
	exists_descriptor(std::string_view name) const noexcept -> bool
	{
		return nvlist_exists_descriptor(_nv, std::string(name).c_str());
	}

	[[nodiscard]] auto exists_binary(std::string_view name) const noexcept
		-> bool
	{
		return nvlist_exists_binary(_nv, std::string(name).c_str());
	}

	[[nodiscard]] auto
	exists_bool_array(std::string_view name) const noexcept -> bool
	{
		return nvlist_exists_bool_array(_nv, std::string(name).c_str());
	}

	[[nodiscard]] auto
	exists_number_array(std::string_view name) const noexcept -> bool
	{
		return nvlist_exists_number_array(_nv,
						  std::string(name).c_str());
	}

	[[nodiscard]] auto
	exists_string_array(std::string_view name) const noexcept -> bool
	{
		return nvlist_exists_string_array(_nv,
						  std::string(name).c_str());
	}

	[[nodiscard]] auto
	exists_nvlist_array(std::string_view name) const noexcept -> bool
	{
		return nvlist_exists_nvlist_array(_nv,
						  std::string(name).c_str());
	}

	[[nodiscard]] auto
	exists_descriptor_array(std::string_view name) const noexcept -> bool
	{
		return nvlist_exists_descriptor_array(
			_nv, std::string(name).c_str());
	}

	auto add_null(std::string_view name) noexcept -> void
	{
		nvlist_add_null(_nv, std::string(name).c_str());
	}

	auto add_bool(std::string_view name, bool value) noexcept -> void
	{
		nvlist_add_bool(_nv, std::string(name).c_str(), value);
	}

	auto add_number(std::string_view name, uint64_t value) noexcept -> void
	{
		nvlist_add_number(_nv, std::string(name).c_str(), value);
	}

	auto add_string(std::string_view name, std::string_view value) noexcept
		-> void
	{
		// TODO: check for NULs
		nvlist_add_string(_nv, std::string(name).c_str(),
				  std::string(value).c_str());
	}

	/*
	 * here for completeness, but don't use these two
	 */
	// NOLINTNEXTLINE
	auto add_stringf(std::string_view name, char const *fmt, ...) noexcept
		-> void
	{
		va_list ap;
		va_start(ap, fmt);
		add_stringv(name, fmt, ap);
		va_end(ap);
	}

	auto add_stringv(std::string_view name,
			 char const	 *fmt,
			 va_list	  ap) noexcept -> void
	{
		nvlist_add_stringv(_nv, std::string(name).c_str(), fmt, ap);
	}

	/* nvlist_add_nvlist() copies the underlying nvlist */
	auto add_nvlist(std::string_view name, nvl const &other) noexcept
		-> void
	{
		nvlist_add_nvlist(_nv, std::string(name).c_str(), other._nv);
	}

	auto add_descriptor(std::string_view name, int value) noexcept -> void
	{
		nvlist_add_descriptor(_nv, std::string(name).c_str(), value);
	}

	template<std::ranges::contiguous_range Range>
	auto add_binary(std::string_view name, Range const &value) noexcept
		-> void
	{
		nvlist_add_binary(_nv, std::string(name).c_str(),
				  std::ranges::data(value),
				  std::ranges::size(value));
	}

	template<std::ranges::contiguous_range Range>
		requires std::is_same_v<
			bool,
			std::remove_cvref_t<std::ranges::range_value_t<Range>>>
	auto add_bool_array(std::string_view name, Range const &value) noexcept
		-> void
	{
		nvlist_add_bool_array(_nv, std::string(name).c_str(),
				      std::ranges::data(value),
				      std::ranges::size(value));
	}

	template<std::ranges::contiguous_range Range>
		requires std::is_same_v<
			uint64_t,
			std::remove_cvref_t<std::ranges::range_value_t<Range>>>
	auto add_number_array(std::string_view name,
			      Range const     &value) noexcept -> void
	{
		nvlist_add_number_array(_nv, std::string(name).c_str(),
					std::ranges::data(value),
					std::ranges::size(value));
	}

	template<std::ranges::contiguous_range Range>
		requires std::is_same_v<
			char *,
			std::remove_cvref_t<std::ranges::range_value_t<Range>>>
	auto add_string_array(std::string_view name,
			      Range const     &value) noexcept -> void
	{
		nvlist_add_string_array(_nv, std::string(name).c_str(),
					std::ranges::data(value),
					std::ranges::size(value));
	}

	template<std::ranges::contiguous_range Range>
		requires std::is_same_v<
			nvlist_t *,
			std::remove_cvref_t<std::ranges::range_value_t<Range>>>
	auto add_nvlist_array(std::string_view name,
			      Range const     &value) noexcept -> void
	{
		nvlist_add_nvlist_array(_nv, std::string(name).c_str(),
					std::ranges::data(value),
					std::ranges::size(value));
	}

	template<std::ranges::contiguous_range Range>
		requires std::is_same_v<
			int,
			std::remove_cvref_t<std::ranges::range_value_t<Range>>>
	auto add_descriptor_array(std::string_view name,
				  Range const	  &value) noexcept -> void
	{
		nvlist_add_descriptor_array(_nv, std::string(name).c_str(),
					    std::ranges::data(value),
					    std::ranges::size(value));
	}

	auto move_string(std::string_view name, char *value) noexcept -> void
	{
		nvlist_move_string(_nv, std::string(name).c_str(), value);
	}

	// although we don't use std::move() here, the nvl is in effect
	// moved-from because we set its value to nullptr.
	// NOLINTNEXTLINE(cppcoreguidelines-rvalue-reference-param-not-moved)
	auto move_nvlist(std::string_view name, nvl &&value) noexcept -> void
	{
		nvlist_move_nvlist(_nv, std::string(name).c_str(),
				   std::exchange(value._nv, nullptr));
	}

	auto move_descriptor(std::string_view name, int value) noexcept -> void
	{
		nvlist_move_descriptor(_nv, std::string(name).c_str(), value);
	}

	auto move_binary(std::string_view name,
			 void		 *value,
			 std::size_t	  size) noexcept -> void
	{
		nvlist_move_binary(_nv, std::string(name).c_str(), value, size);
	}

	auto move_bool_array(std::string_view name,
			     bool	     *value,
			     std::size_t      nitems) noexcept -> void
	{
		nvlist_move_bool_array(_nv, std::string(name).c_str(), value,
				       nitems);
	}

	auto move_number_array(std::string_view name,
			       uint64_t	       *value,
			       std::size_t	nitems) noexcept -> void
	{
		nvlist_move_number_array(_nv, std::string(name).c_str(), value,
					 nitems);
	}

	auto move_string_array(std::string_view name,
			       char	      **value,
			       std::size_t	nitems) noexcept -> void
	{
		nvlist_move_string_array(_nv, std::string(name).c_str(), value,
					 nitems);
	}

	auto move_nvlist_array(std::string_view name,
			       nvlist_t	      **value,
			       std::size_t	nitems) noexcept -> void
	{
		nvlist_move_nvlist_array(_nv, std::string(name).c_str(), value,
					 nitems);
	}

	auto move_descriptor_array(std::string_view name,
				   int		   *value,
				   std::size_t	    nitems) noexcept -> void
	{
		nvlist_move_descriptor_array(_nv, std::string(name).c_str(),
					     value, nitems);
	}

	[[nodiscard]] auto get_bool(std::string_view name) const noexcept
		-> bool
	{
		return nvlist_get_bool(_nv, std::string(name).c_str());
	}

	[[nodiscard]] auto get_number(std::string_view name) const noexcept
		-> uint64_t
	{
		return nvlist_get_number(_nv, std::string(name).c_str());
	}

	[[nodiscard]] auto get_string(std::string_view name) const noexcept
		-> std::string_view
	{
		return nvlist_get_string(_nv, std::string(name).c_str());
	}

	// TODO: don't discard const of the returned nvlist here
	[[nodiscard]] auto get_nvlist(std::string_view name) const noexcept
		-> nvl
	{
		auto nvlist = const_cast<nvlist_t *>(
			nvlist_get_nvlist(_nv, std::string(name).c_str()));
		return nvl(nvlist, false);
	}

	[[nodiscard]] auto get_descriptor(std::string_view name) const noexcept
		-> int
	{
		return nvlist_get_descriptor(_nv, std::string(name).c_str());
	}

	[[nodiscard]] auto get_binary(std::string_view name) const noexcept
		-> std::span<std::byte const>
	{
		std::size_t size{};
		auto *data = nvlist_get_binary(_nv, std::string(name).c_str(),
					       &size);
		return {static_cast<std::byte const *>(data), size};
	}

	[[nodiscard]] auto get_bool_array(std::string_view name) const noexcept
		-> std::span<bool const>
	{
		std::size_t nitems{};
		auto	   *data = nvlist_get_bool_array(
			      _nv, std::string(name).c_str(), &nitems);
		return {data, nitems};
	}

	[[nodiscard]] auto
	get_number_array(std::string_view name) const noexcept
		-> std::span<std::uint64_t const>
	{
		std::size_t nitems{};
		auto	   *data = nvlist_get_number_array(
			      _nv, std::string(name).c_str(), &nitems);
		return {data, nitems};
	}

	[[nodiscard]] auto
	get_string_array(std::string_view name) const noexcept
		-> std::span<char const *const>
	{
		std::size_t nitems{};
		auto	   *data = nvlist_get_string_array(
			      _nv, std::string(name).c_str(), &nitems);
		return {data, nitems};
	}

	// TODO: don't discard const of the returned nvlists
	[[nodiscard]] auto
	// NOLINTNEXTLINE(bugprone-exception-escape)
	get_nvlist_array(std::string_view name) const noexcept
		-> std::vector<nvl>
	{
		std::size_t nitems{};
		auto	   *data = nvlist_get_nvlist_array(
			      _nv, std::string(name).c_str(), &nitems);
		return {std::from_range,
			std::span(data, nitems)
				| std::views::transform([](auto &&nvlist) {
					  return nvl(const_cast<nvlist_t *>(
							     nvlist),
						     false);
				  })};
	}

	[[nodiscard]] auto
	get_descriptor_array(std::string_view name) const noexcept
		-> std::span<int const>
	{
		std::size_t nitems{};
		auto	   *data = nvlist_get_descriptor_array(
			      _nv, std::string(name).c_str(), &nitems);
		return {data, nitems};
	}

	[[nodiscard]] auto take_bool(std::string_view name) noexcept -> bool
	{
		return nvlist_take_bool(_nv, std::string(name).c_str());
	}

	[[nodiscard]] auto take_number(std::string_view name) noexcept
		-> uint64_t
	{
		return nvlist_take_number(_nv, std::string(name).c_str());
	}

	// NOLINTNEXTLINE(bugprone-exception-escape)
	[[nodiscard]] auto take_string(std::string_view name) noexcept
		-> std::string
	{
		return nvlist_take_string(_nv, std::string(name).c_str());
	}

	[[nodiscard]] auto take_nvlist(std::string_view name) noexcept -> nvl
	{
		return nvl(nvlist_take_nvlist(_nv, std::string(name).c_str()));
	}

	[[nodiscard]] auto take_descriptor(std::string_view name) noexcept
		-> int
	{
		return nvlist_take_descriptor(_nv, std::string(name).c_str());
	}

	// NOLINTNEXTLINE(bugprone-exception-escape)
	[[nodiscard]] auto take_binary(std::string_view name) noexcept
		-> std::vector<std::byte>
	{
		std::size_t size{};
		auto *data = nvlist_take_binary(_nv, std::string(name).c_str(),
						&size);
		auto  bytes = static_cast<std::byte *>(data);
		return {bytes, bytes + size};
	}

	// NOLINTNEXTLINE(bugprone-exception-escape)
	[[nodiscard]] auto take_bool_array(std::string_view name) noexcept
		-> std::vector<bool>
	{
		std::size_t nitems{};
		auto	   *data = nvlist_take_bool_array(
			      _nv, std::string(name).c_str(), &nitems);
		return {std::from_range, std::span(data, nitems)};
	}

	// NOLINTNEXTLINE(bugprone-exception-escape)
	[[nodiscard]] auto take_number_array(std::string_view name) noexcept
		-> std::vector<std::uint64_t>
	{
		std::size_t nitems{};
		auto	    data = free_ptr<uint64_t>(nvlist_take_number_array(
			       _nv, std::string(name).c_str(), &nitems));
		return {data.get(), data.get() + nitems};
	}

	// NOLINTNEXTLINE(bugprone-exception-escape)
	[[nodiscard]] auto take_string_array(std::string_view name) noexcept
		-> std::vector<std::string>
	{
		std::size_t nitems{};
		auto	    data = free_ptr<char *>(nvlist_take_string_array(
			       _nv, std::string(name).c_str(), &nitems));
		return {std::from_range,
			std::span(data.get(), nitems)
				| std::views::transform([](auto &&s) {
					  return std::string(s);
				  })};
	}

	// NOLINTNEXTLINE(bugprone-exception-escape)
	[[nodiscard]] auto take_nvlist_array(std::string_view name) noexcept
		-> std::vector<nvl>
	{
		std::size_t nitems{};
		auto data = free_ptr<nvlist_t *>(nvlist_take_nvlist_array(
			_nv, std::string(name).c_str(), &nitems));
		return {std::from_range,
			std::span(data.get(), nitems)
				| std::views::transform([](auto &&nvlist) {
					  return nvl(nvlist);
				  })};
	}

	// NOLINTNEXTLINE(bugprone-exception-escape)
	[[nodiscard]] auto take_descriptor_array(std::string_view name) noexcept
		-> std::vector<int>
	{
		std::size_t nitems{};
		auto	    data = free_ptr<int>(nvlist_take_descriptor_array(
			       _nv, std::string(name).c_str(), &nitems));
		return {data.get(), data.get() + nitems};
	}

	/*
	 * append_* functions
	 */

	auto append_bool_array(std::string_view name, bool value) noexcept
		-> void
	{
		nvlist_append_bool_array(_nv, std::string(name).c_str(), value);
	}

	auto append_number_array(std::string_view name,
				 std::uint64_t	  value) noexcept -> void
	{
		nvlist_append_number_array(_nv, std::string(name).c_str(),
					   value);
	}

	auto append_descriptor_array(std::string_view name, int value) noexcept
		-> void
	{
		nvlist_append_descriptor_array(_nv, std::string(name).c_str(),
					       value);
	}

	auto append_string_array(std::string_view name,
				 std::string_view value) noexcept -> void
	{
		nvlist_append_string_array(_nv, std::string(name).c_str(),
					   std::string(value).c_str());
	}

	auto append_nvlist_array(std::string_view name,
				 nvl const	 &nvlist) noexcept -> void
	{
		nvlist_append_nvlist_array(_nv, std::string(name).c_str(),
					   nvlist._nv);
	}

	/*
	 * free_* functions
	 */

	auto free(std::string_view name) noexcept -> void
	{
		nvlist_free(_nv, std::string(name).c_str());
	}

	auto free_type(std::string_view name, int type) noexcept -> void
	{
		nvlist_free_type(_nv, std::string(name).c_str(), type);
	}

	auto free_null(std::string_view name) noexcept -> void
	{
		nvlist_free_null(_nv, std::string(name).c_str());
	}

	auto free_bool(std::string_view name) noexcept -> void
	{
		nvlist_free_bool(_nv, std::string(name).c_str());
	}

	auto free_number(std::string_view name) noexcept -> void
	{
		nvlist_free_number(_nv, std::string(name).c_str());
	}

	auto free_string(std::string_view name) noexcept -> void
	{
		nvlist_free_string(_nv, std::string(name).c_str());
	}

	auto free_nvlist(std::string_view name) noexcept -> void
	{
		nvlist_free_nvlist(_nv, std::string(name).c_str());
	}

	auto free_descriptor(std::string_view name) noexcept -> void
	{
		nvlist_free_descriptor(_nv, std::string(name).c_str());
	}

	auto free_binary(std::string_view name) noexcept -> void
	{
		nvlist_free_binary(_nv, std::string(name).c_str());
	}

	auto free_bool_array(std::string_view name) noexcept -> void
	{
		nvlist_free_bool_array(_nv, std::string(name).c_str());
	}

	auto free_number_array(std::string_view name) noexcept -> void
	{
		nvlist_free_number_array(_nv, std::string(name).c_str());
	}

	auto free_string_array(std::string_view name) noexcept -> void
	{
		nvlist_free_string_array(_nv, std::string(name).c_str());
	}

	auto free_nvlist_array(std::string_view name) noexcept -> void
	{
		nvlist_free_nvlist_array(_nv, std::string(name).c_str());
	}

	auto free_descriptor_array(std::string_view name) noexcept -> void
	{
		nvlist_free_descriptor_array(_nv, std::string(name).c_str());
	}

private:
	template<typename T>
	using free_ptr =
		// NOLINTNEXTLINE
		std::unique_ptr<T, decltype([](auto &&p) { ::free(p); })>;
	using nvlist_ptr =
		std::unique_ptr<nvlist_t, decltype([](auto &&nvlist) {
					nvlist_destroy(nvlist);
				})>;

	auto _free() noexcept -> void
	{
		if ((_nv != nullptr) && _owning)
			nvlist_destroy(_nv);
	}

	nvlist_t *_nv{};
	bool	  _owning;
};

} // namespace netd
