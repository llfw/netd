/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or distribute
 * this software, either in source code form or as a compiled binary, for any
 * purpose, commercial or non-commercial, and by any means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors of
 * this software dedicate any and all copyright interest in the software to the
 * public domain. We make this dedication for the benefit of the public at
 * large and to the detriment of our heirs and successors. We intend this
 * dedication to be an overt act of relinquishment in perpetuity of all present
 * and future rights to this software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module;

/*
 * a wrapper around a file descriptor.
 */

#include	<expected>
#include	<system_error>
#include	<format>

#include	<unistd.h>

export module netd.async:fd;

import netd.util;

namespace netd {

export struct fd {
	fd() noexcept = default;

	explicit fd(int fd_) : _fd(fd_) {}

	fd (fd &&other) noexcept
	: _fd(std::exchange(other._fd, -1)) {}

	fd(fd const &) = delete;

	~fd() {
		if (is_open())
			::close(_fd);
	}

	auto operator=(fd &&other) noexcept -> fd& {
		if (this != &other) {
			_fd = std::exchange(other._fd, -1);
		}
		return *this;
	}

	auto operator=(fd const &) = delete;

	[[nodiscard]] auto is_open() const noexcept -> bool {
		return _fd != -1;
	}

	[[nodiscard]] explicit operator bool() const noexcept {
		return is_open();
	}

	[[nodiscard]] auto close() noexcept -> std::expected<void, std::error_code> {
		if (!is_open())
			panic("fd: attempting to close fd that isn't open");

		if (auto r = ::close(_fd); r == 0)
			return {};
		else
			return std::unexpected(error::from_errno());
	}

	[[nodiscard]] auto get() const noexcept -> int {
		if (!is_open())
			panic("fd: attempting to get() a closed fd");
		return _fd;
	}

private:
	int _fd = -1;
};

} // namespace netd

// std::format support for fd
// TODO: specialising std::formatter in a module doesn't seem to work
export template<>
struct std::formatter<netd::fd> {
    constexpr auto parse(std::format_parse_context &ctx) {
        return ctx.begin();
    }

    auto format(const netd::fd& fdesc, std::format_context& ctx) const {
	    if (!fdesc.is_open())
		    return std::format_to(ctx.out(), "[closed fd]");
	    return std::format_to(ctx.out(), "[fd {}]", fdesc.get());
    }
};
