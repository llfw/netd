/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or distribute
 * this software, either in source code form or as a compiled binary, for any
 * purpose, commercial or non-commercial, and by any means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors of
 * this software dedicate any and all copyright interest in the software to the
 * public domain. We make this dedication for the benefit of the public at
 * large and to the detriment of our heirs and successors. We intend this
 * dedication to be an overt act of relinquishment in perpetuity of all present
 * and future rights to this software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module;

#include <sys/uio.h>

#include <cstdarg>
#include <format>
#include <print>
#include <string>
#include <unistd.h>

using namespace std::literals;

export module netd.util:panic;

/*
 * panic: write out a message, then abort the program.
 */
namespace netd {

[[noreturn]] auto _panic(std::string_view const &msg) noexcept -> void
{
	std::array<::iovec, 2> vecs = {
		::iovec{const_cast<char *>(data(msg)), size(msg)},
		::iovec{const_cast<char *>("\n"),	  1	   },
	};
	(void)::writev(STDERR_FILENO, data(vecs), size(vecs));
	std::abort();
}

/* log a message at the highest priority and immediately abort */
export template<typename... Args>
[[noreturn]] auto panic(std::format_string<Args...> fmt,
			Args &&...args) noexcept -> void
{
	try {
		auto msg = std::vformat(
			fmt.get(),
			std::make_format_args(std::forward<Args>(args)...));
		_panic(msg);
	} catch (...) {
		constexpr auto error = "panic: <unable to format message>\n"sv;
		(void)::write(STDERR_FILENO, data(error), size(error));
		std::abort();
	}
}

} // namespace netd
