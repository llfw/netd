/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or distribute
 * this software, either in source code form or as a compiled binary, for any
 * purpose, commercial or non-commercial, and by any means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors of
 * this software dedicate any and all copyright interest in the software to the
 * public domain. We make this dedication for the benefit of the public at
 * large and to the detriment of our heirs and successors. We intend this
 * dedication to be an overt act of relinquishment in perpetuity of all present
 * and future rights to this software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module;

/*
 * kq: lightweight wrapper around kqueue()/kevent() that allows users to
 * register handlers for various events.
 */

#include	<sys/types.h>
#include	<sys/socket.h>

#include	<system_error>
#include	<functional>
#include	<expected>
#include	<span>

#include	"defs.hh"

import log;
import task;

export module kq;

namespace netd::kq {

/*
 * the current time.  this is updated every time the event loop runs, before
 * events are dispatched.
 */
export inline time_t current_time;

/* initialise kq */
export int init(void);

/* start the kq runner.  only returns on failure. */
export auto run(void) -> std::expected<void, std::error_code>;

/* call handler() at the end of the current event loop */
using dispatchcb = std::function<void ()>;
export void dispatch(dispatchcb handler);

/* register an fd in kqueue.  this must be done before using it. */
export auto open(int fd) -> std::expected<void, std::error_code>;

/* create a socket and register it with kq in a single operation */
export auto socket(int, int, int) -> std::expected<int, std::error_code>;

/* unregister an fd, close it and cancel any pending events */
export int close(int fd);

/******************************************************************************
 * async (coroutine) interface.
 */

/*
 * start an async task in the background.  the task will run until completion,
 * then be destroyed.
 */
export auto run_task(task<void> &&task) -> void;

/*
 * suspend until the given fd becomes readable.
 */
export auto readable(int fd) -> task<void>;

/*
 * sleep until the given timer expires.
 */
export auto sleep(std::chrono::nanoseconds) -> task<void>;

export template<typename Rep, typename Period>
auto sleep(std::chrono::duration<Rep, Period> duration) -> task<void> {
	co_await sleep(std::chrono::duration_cast<
				std::chrono::nanoseconds
			>(duration));
}

/*
 * read data into the provided buffer.
 */
export auto read(int fd, std::span<std::byte> buf)
	-> task<std::expected<std::size_t, std::error_code>>;

/*
 * read a single message into the provided buffer.  reading will continue until
 * the entire message is received (MSG_EOR).
 *
 * returns the size of the message read, or error.  if the buffer is too small
 * to hold the message, the message is discarded and ENOSPC is returned.
 */
export [[nodiscard]]
auto recvmsg(int fd, std::span<std::byte> buf) ->
	task<std::expected<std::size_t, std::error_code>>;

/*
 * accept a connection on the given server socket.  the arguments are as
 * described in accept4(2).
 *
 * the fd will have kq::open() called on it automatically.
 */
export [[nodiscard]]
auto accept4(int server_fd, sockaddr *, socklen_t *, int flags)
	-> task<std::expected<int, std::error_code>>;

} // namespace netd::kq
