/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or distribute
 * this software, either in source code form or as a compiled binary, for any
 * purpose, commercial or non-commercial, and by any means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors of
 * this software dedicate any and all copyright interest in the software to the
 * public domain. We make this dedication for the benefit of the public at
 * large and to the detriment of our heirs and successors. We intend this
 * dedication to be an overt act of relinquishment in perpetuity of all present
 * and future rights to this software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module;

/*
 * netlink support; handles receiving network-related events from the kernel
 * and dispatching them to the appropriate place.
 */

#include	<netlink/netlink.h>
#include	<netlink/route/interface.h>

#include	<string>
#include	<array>
#include	<expected>
#include	<memory>
#include	<system_error>
#include	<unistd.h>

#include	"defs.hh"

import msgbus;
import task;

export module netlink;

namespace netd::netlink {

/*
 * a netlink socket which can read and write messages.
 */
export struct socket {
	socket() = default;

	socket(socket &&other) {
		*this = std::move(other);
	}

	socket(socket const &) = delete;

	auto operator=(socket const &) = delete;
	auto operator=(socket &&other) -> socket& {
		if (this != &other) {
			_fd = std::exchange(other._fd, -1);
			std::swap(_buffer, other._buffer);
			_msgsize = other._msgsize;
			_pending = other._pending;
		}

		return *this;
	}

	~socket() {
		if (_fd != -1)
			::close(_fd);
	}

	// create a new netlink socket
	static auto create(int flags)
		-> std::expected<socket, std::error_code>;

	// read a single message from the socket
	auto read(void) -> task<std::expected<nlmsghdr *, std::error_code>>;

	// send a message to the socket
	auto send(nlmsghdr *msg) -> task<std::expected<void, std::error_code>>;

	// join the socket to the given group
	auto join(int group) -> task<std::expected<void, std::error_code>>;

private:
	// the read buffer
	std::vector<std::byte>	_buffer;
	// the size of the last message we read
	std::size_t		_msgsize = 0;
	// the amount of unprocessed data in the buffer
	std::size_t		_pending = 0;

	int			_fd = -1;
};

/* initialise the netlink subsystem */
export auto init(void) -> task<std::expected<void, std::error_code>>;

/*
 * msgbus events
 */

/* interface created */
export struct newlink_data {
	unsigned		nl_ifindex;
	std::string		nl_ifname;
	uint8_t			nl_operstate;
	uint32_t		nl_flags;
	struct rtnl_link_stats64 * nonnull
				nl_stats;
};

export inline msgbus::event<newlink_data> evt_newlink;

/* interface destroyed */
export struct dellink_data {
	unsigned	 dl_ifindex;
};
export inline msgbus::event<dellink_data> evt_dellink;

/* interface address created */
export struct newaddr_data {
	unsigned	na_ifindex;
	int		na_family;
	int		na_plen;
	void * nonnull	na_addr;
};
export inline msgbus::event<newaddr_data> evt_newaddr;


/* interface address removed */
export struct deladdr_data {
	unsigned	da_ifindex;
	int		da_family;
	int		da_plen;
	void * nonnull	da_addr;
};
export inline msgbus::event<deladdr_data> evt_deladdr;

} // namespace netd::netlink
