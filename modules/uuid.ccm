/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or distribute
 * this software, either in source code form or as a compiled binary, for any
 * purpose, commercial or non-commercial, and by any means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors of
 * this software dedicate any and all copyright interest in the software to the
 * public domain. We make this dedication for the benefit of the public at
 * large and to the detriment of our heirs and successors. We intend this
 * dedication to be an overt act of relinquishment in perpetuity of all present
 * and future rights to this software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module;

#include	<sys/uuid.h>

#include	<functional>
#include	<algorithm>

export module uuid;

/*
 * utilities for dealing with UUIDs.
 */

export template<>
struct std::hash<uuid> {
	auto operator()(uuid const &s) const -> std::size_t {
		// TODO: consider hashing node as well
		return    std::hash<std::uint32_t>{}(s.time_low)
			^ std::hash<std::uint16_t>{}(s.time_mid)
			^ std::hash<std::uint16_t>{}(s.time_hi_and_version)
			^ std::hash<std::uint8_t>{}(s.clock_seq_hi_and_reserved)
			^ std::hash<std::uint8_t>{}(s.clock_seq_low);
	}
};

export inline constexpr auto operator==(uuid const &a, uuid const &b) -> bool {
	return	a.time_low == b.time_low
		&& a.time_mid == b.time_mid
		&& a.time_hi_and_version == b.time_hi_and_version
		&& a.clock_seq_hi_and_reserved == b.clock_seq_hi_and_reserved
		&& a.clock_seq_low == b.clock_seq_low
		&& std::ranges::equal(a.node, b.node);
}
