/*
 * This is free and unencumbered software released into the public domain.
 *
 * Anyone is free to copy, modify, publish, use, compile, sell, or distribute
 * this software, either in source code form or as a compiled binary, for any
 * purpose, commercial or non-commercial, and by any means.
 *
 * In jurisdictions that recognize copyright laws, the author or authors of
 * this software dedicate any and all copyright interest in the software to the
 * public domain. We make this dedication for the benefit of the public at
 * large and to the detriment of our heirs and successors. We intend this
 * dedication to be an overt act of relinquishment in perpetuity of all present
 * and future rights to this software under copyright law.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module;

#include	<list>
#include	<vector>
#include	<functional>
#include	<algorithm>
#include	<ranges>
#include	<unordered_map>
#include	<cassert>

import netd.event;

export module isam;

/*
 * a very simple in-memory ISAM-style container.  isam<T> is an std::list<T>
 * with one or more optional indices which can be used to look up objects
 * quickly.
 *
 * loosely inspired by (although entirely unrelated to) Boost's Multi Index
 * Container.
 *
 * TODO: flesh this out to be more like an actual container.
 */

namespace netd::isam {

template<typename T, typename K>
using extractor = std::function<K (T const &)>;

export template<typename T>
struct isam final {
	using iterator = std::list<T>::iterator;
	using const_iterator = std::list<T>::const_iterator;
	using reverse_iterator = std::list<T>::reverse_iterator;
	using const_reverse_iterator = std::list<T>::reverse_iterator;
	using value_type = std::list<T>::value_type;
	using reference = std::list<T>::reference;
	using const_reference = std::list<T>::const_reference;
	using size_type = std::list<T>::size_type;
	using pointer = std::list<T>::pointer;
	using const_pointer = std::list<T>::const_pointer;

	isam() = default;
	isam(isam const &) = delete;
	isam(isam &&) = delete;
	auto operator=(isam const &) = delete;
	auto operator=(isam &&) = delete;

	// this event is raised after a new object is inserted
	event::event<isam<T> &, iterator> object_added;

	// this event is raised before an existing object is removed
	event::event<isam<T> &, iterator> object_removed;

	/*
	 * insert()
	 */

	auto insert(T const &v) -> iterator {
		return insert(_list.end(), v);
	}

	auto insert(T &&v) -> iterator {
		return insert(_list.end(), std::move(v));
	}

	auto insert(iterator where, T const &v) -> iterator {
		auto it = _list.insert(where, v);
		object_added.dispatch(*this, it);
		return it;
	}

	auto insert(iterator where, T &&v) -> iterator {
		auto it = _list.insert(where, std::move(v));
		object_added.dispatch(*this, it);
		return it;
	}

	/*
	 * emplace()
	 */

	template<typename... Args>
	auto emplace(iterator where, Args&&... args) -> iterator {
		auto it = _list.emplace(where, std::forward<Args>(args)...);
		object_added.dispatch(*this, it);
		return it;
	}

	/*
	 * erase()
	 */

	auto erase(iterator item) -> void {
		object_removed.dispatch(*this, item);
		_list.erase(item);
	}

	/*
	 * begin(), end()
	 */

	auto begin() {
		return _list.begin();
	}

	auto begin() const {
		return _list.begin();
	}

	auto end() {
		return _list.end();
	}

	auto end() const {
		return _list.end();
	}

	auto rbegin() {
		return _list.rbegin();
	}

	auto rbegin() const {
		return _list.rbegin();
	}

	auto rend() {
		return _list.rend();
	}

	auto rend() const {
		return _list.rend();
	}

private:
	std::list<T> _list;
};

export template<typename T, typename K>
struct index final {
private:
	extractor<T, K> _ext;
	std::unordered_map<K, typename isam<T>::iterator> _map;

	event::sub _object_added;
	event::sub _object_removed;

public:
	template<typename Func>
	index(isam<T> &isam, Func ext)
	: _ext(std::move(ext)) {

		_object_added = sub(isam.object_added,
				   [&] (auto &, auto it) {
					   _map.insert(_ext(*it), it);
				});

		_object_removed = sub(isam.object_removed,
				   [&] (auto &, auto it) {
					   _map.remove(_map.find(_ext(*it)));
				});
	}

	auto find(K const &key) {
		return _map.find(key);
	}

	auto find(K const &key) const {
		return _map.find(key);
	}

	auto begin() {
		return _map.begin();
	}

	auto begin() const {
		return _map.begin();
	}

	auto end() {
		return _map.end();
	}

	auto end() const {
		return _map.end();
	}

	auto rbegin() {
		return _map.rbegin();
	}

	auto rbegin() const {
		return _map.rbegin();
	}

	auto rend() {
		return _map.rend();
	}

	auto rend() const {
		return _map.rend();
	}

private:
};

template<typename T, typename Func>
index(isam<T> &, Func) -> index<T, decltype(std::declval<Func>()(std::declval<T>()))>;


} // namespace netd::isam
